-- SPDX-License-Identifier: MIT
-- SPDX-FileContributor: Adrian "asie" Siekierka, 2023

local path = require('pl.path')
local tablex = require('pl.tablex')
local toml = require('wf.internal.toml')
local wfoverlaylist = require('wf.internal.overlay_list')
local wfpackage = require('wf.internal.package')
local wfpath = require('wf.internal.path')

local tool_fix = require('wf.internal.tool.gbatool.fix')

local function romlink_call_linker(linkscript_filename, output_elf, output_file, subtarget, config, linker_args)
    local success, code = execute_verbose_or_error(
        wfpath.executable('arm-none-eabi-gcc', 'toolchain/gcc-arm-none-eabi'),
        table.pack("-T", linkscript_filename, "-o", output_elf, table.unpack(linker_args))
    )
    if subtarget == "multiboot" then
        local options = {}
        if config.multiboot then
            if config.multiboot.compress == false then
                table.insert(options, "-0")
            else
                if config.multiboot.vram_compression_algorithm == "lzss" then
                    table.insert(options, "-L")
                    table.insert(options, wfpackage.executable_or_error("wf-nnpack", "wf-nnpack-lzss"))
                end 
            end
        end
        table.insert(options, output_elf)
        table.insert(options, output_file)

        success, code = execute_verbose_or_error(
            wfpackage.executable_or_error('wf-agbpack', 'wf-agbpack'), options
        )
    else
        success, code = execute_verbose_or_error(
            wfpath.executable('arm-none-eabi-objcopy', 'toolchain/gcc-arm-none-eabi'),
            table.pack("-O", "binary", output_elf, output_file)
        )
    end
end

local function rom_write_linkscript_overlay(f, name, memory_name, overlays)
    local layers = wfoverlaylist.create(overlays)
    local prev_layer = nil
    for layer_i, layer in ipairs(layers) do
        if prev_layer == nil then
            f:write(string.format("  __overlay_%s%d_start = ADDR(.bss.%s) + SIZEOF(.bss.%s);\n", name, layer_i, name, name))
        else
            prev_layer_expr = "0"
            for _, node in pairs(prev_layer) do
                if not node.terminating then
                    prev_layer_expr = string.format("MAX(SIZEOF(.%s_%s), %s)", name, node.name, prev_layer_expr)
                end
            end
            f:write(string.format("  __overlay_%s%d_start = __overlay_%s%d_start + %s;\n", name, layer_i, name, layer_i - 1, prev_layer_expr))
        end
        for _, node in pairs(layer) do
            f:write(string.format("  __load_addr_%s_%s = __overlay_%s%d_start;\n", name, node.name, name, layer_i))
        end
        f:write(string.format("  OVERLAY __overlay_%s%d_start : NOCROSSREFS {\n", name, layer_i))
        for _, node in pairs(layer) do
            f:write(string.format("    .%s_%s {\n", name, node.name))
            f:write(string.format("      *(SORT(.%s_%s.sorted.*))\n", name, node.name))
            f:write(string.format("      *(.%s_%s .%s_%s.*)\n", name, node.name, name, node.name))
            f:write(string.format("      . = ALIGN(. != 0 ? 4 : 1);\n"))
            f:write(string.format("    }\n"))
        end
        f:write(string.format("  } >%s AT>ROM :%s\n", memory_name, memory_name))
        prev_layer = layer
    end
end

local function rom_write_linkscript(f, parent_name, config, subtarget)
    -- load information from config
    local data_region = nil
    if config.memory ~= nil then
        data_region = config.memory.data_region
    end
    if data_region ~= nil then data_region = data_region:upper() end
    if data_region ~= "EWRAM" and data_region ~= "IWRAM" and data_region ~= "VRAM" then
        data_region = "EWRAM"
    end

    -- include memory layout
    f:write([[
/* automatically generated by wf-gbatool on ]] .. os.date() .. [[ */

INCLUDE ]] .. parent_name .. "\n\n")

    -- augment memory layout
    f:write(string.format('REGION_ALIAS("DATA", %s)\n', data_region))
    if subtarget == "multiboot" then
        f:write(string.format('REGION_ALIAS("DATA_LOAD", %s)\n', data_region))
    else
        f:write('REGION_ALIAS("DATA_LOAD", "ROM")\n')
    end
    f:write(string.format('REGION_ALIAS("BSS", %s)\n', data_region))
    f:write(string.format('REGION_ALIAS("NOINIT", %s)\n', data_region))

    -- include section layout
    f:write([[
INCLUDE link-elf.ld

SECTIONS {
]])

    -- augment section layout
    if config.memory ~= nil then
        if config.memory.overlay ~= nil and config.memory.overlay.iwram ~= nil then
            rom_write_linkscript_overlay(f, "iwram", "IWRAM", config.memory.overlay.iwram)
        end
        if config.memory.overlay ~= nil and config.memory.overlay.ewram ~= nil then
            rom_write_linkscript_overlay(f, "ewram", "EWRAM", config.memory.overlay.ewram)
        end
        if config.memory.overlay ~= nil and config.memory.overlay.vram ~= nil then
            rom_write_linkscript_overlay(f, "vram", "VRAM", config.memory.overlay.vram)
        end
    end

    f:write([[}

INCLUDE link-size-symbols.ld
]])
end

local function romlink_run(args, linker_args)
    local config = {}
    local config_filename = args.config or "wfconfig.toml"
    if (args.config ~= nil) or path.exists(config_filename) then
        local config_data = toml.decodeFromFile(config_filename)
        config = tablex.union(config_data, config)
    end
    local parent_filename = "link-" .. args.subtarget .. ".mem"

    -- generate linkscript
    local linkscript_filename = args.script
    if linkscript_filename == nil then
        linkscript_filename = args.output_ld or temp_dir:path("link.ld")
        local linkscript_file = io.open(linkscript_filename, "w")
        rom_write_linkscript(linkscript_file, parent_filename, config, args.subtarget)
        linkscript_file:close()
    end

    -- run "arm-none-eabi-ld", "arm-none-eabi-objcopy"
    romlink_call_linker(linkscript_filename, args.output_elf or temp_dir:path("a.out.elf"), args.output, args.subtarget, config, linker_args)

    -- run "wf-gbatool fix"
    local tool_fix_args = tablex.copy(args)
    tool_fix_args.input_file = args.output
    local tool_fix_success, tool_fix_error = pcall(function()
        tool_fix.run(tool_fix_args)
    end)
    if not tool_fix_success then
        os.remove(args.output)
        error(tool_fix_error)
    end
end

return {
    ["arguments"] = [[
[args...] <subtarget> -- <linker args...>: link a GBA target ROM
  -c,--config   (optional string)  Configuration file name;
                                   wfconfig.toml is used by default.
  -o,--output   (string)           Output ROM file name.
  --output-elf  (optional string)  Output ELF file name;
                                   only stored on request.
  --output-ld   (optional string)  Output link script .ld file name;
                                   only stored on request.
  -T,--script   (optional string)  Input link script .ld file to use.
                                   This disables automatic link script
                                   generation.
  -v,--verbose                     Enable verbose logging.
  <subtarget>   (string)           Subtarget: "rom" or "multiboot".
]],
    ["argument_separator"] = "--",
    ["description"] = "link a GBA target ROM",
    ["run"] = romlink_run
}
